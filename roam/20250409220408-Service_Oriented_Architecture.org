:PROPERTIES:
:ID: 4d4cd792-228a-49b1-a926-978c25d4a53c
:END:
#+TITLE: Service Oriented Architecture

* Intro to Web Services Oriented and Service Oriented Architecture
** Services
   - Actions that help fulfill a /task/.
** Monolithic Computing
*** Single-user Monolithic Computing
    - Not connected to any network.
    - Used by only one user at a time.
    - Only uses resources within its /immediate/ access.
*** Multi-user Monolithic Computing
    - Share resources using *timesharing*.
    - A [[Mainframe Computers][*mainframe*]] is used.
      - Accessed through *terminals* (keyboard and monitor)
**** Mainframe Computers
     - Multi-user
     - Multi-programming
     - High performance
** Types of Computer Networks
   1. Personal Area Network (PAN or WPAN)
   2. Body Area Network (BAN)
     - Wearable or implantable
   3. Local Area Network (LAN)
     - Ethernet (10 Mbps)
     - Fast Ethernet (100 Mbps)
     - Gigabit Ethernet (1000 Mbps)
     - Wifi
   4. Campus Area Network (CAN)
   5. Metropolitan Area Network (MAN)
     - Usually established with optical fiber.
   6. Wide Area Network (WAN)
   7. Internet
** Distributed System
   #+BEGIN_QUOTE
   Multiple software components that are on multiple computers but run as a single system.
   #+END_QUOTE

   - or Distributed Computing
   - Collection of independent components (nodes)
     - Communicate and coordinate actions
   - Appears as a single coherent system
     - Nodes can fail independently
   - Can accept more requests and perform more jobs than a standard system

* Service Oriented Architecture
  - Uses the /find-bind-execute/ 
    - Providers register service
    - Consumer searches registry
    - Registry contracts consumer for service
*** Core Principles
    - Reusability
    - Composability
    - Interopability
    - Loose Coupling
    - Autonomy
*** Advantages
    - Ease of integration
    - Improved Flexibility
    - Managed Complexity
    - Platform Independence
    - Loose Coupling
    - Parallel Development
    - Available
    - Reliable
    - Cost Efficiency
*** Challenges
    - Complexity
    - Performance Overhead
    - Service Discoverability
    - Service Versioning and Backward Compatibility
*** Components
**** Functional Aspects
     - Transport
     - Service Communication Protocol
     - Service Description
     - Service
     - Business Process
     - Service Registry
**** Quality of Service Aspects
     - Policy
     - Security
     - Transaction
     - Management
* Web Services
  - Services that communicate over the WWW HTTP.
  - /code on demand/
  - A function or method we can call by sending an /HTTP request/ to a URL.
    - The service returns the result back as a /response/.
  - Platform independent
** Benefits 
   - Exposing the existing function on the network
   - Interopability
   - Standardized protocol
   - Low cost communication
** Simple Object Access Protocol (=SOAP=)
   - Is a protocol
   - Traditional/*OLD*
   - =XML=-based.
   - Structured but complex
   - Uses =WSDL= for describing functionalities (documentation)
     - [[Web Services Description Language (=WSDL=)][/Web Services Description Language/]]
   - Often used in _enterprise applications_ where reliability and security are critical.
*** Web Services Description Language (=WSDL=)
    - Developed jointly by Microsoft and IBM.
    - Integral part of [[Universal Description, Discovery, and Integration (=UDDI=)][=UDDI=]]
    - Describe the structure and behavior of =SOAP=-based web services
**** Universal Description, Discovery, and Integration (=UDDI=)
     - Registry for web services
     - Also a specification standard
*** Advantages
    - =WS Security=
      - =SOAP= defines its own security.
    - Platform independent
*** Disadvantages
    - Slow
      - Because of =XML= parsing
      - Consumes more bandwidth and resource
    - =WSDL= dependent

** Representational State Transfer API (=REST=)
   - Is an architectural style.
   - Modern APIs, mobile apps
   - Uses =JSON= and sometimes =XML=.
   - Simple and lightweight
   - Use =HTTP= requests
     - =GET=
     - =POST=
     - =PUT=
     - =DELETE=
*** Advantages
    - Efficient/Fast
    - Language/Platform independent
    - Flexible

* Web Services Architecture
** Four main layers
*** Service Transport
    - =HTTP=
*** Messaging Layer
    - =SOAP= or =REST= API
*** Service Description
    - =WSDL/UDDI= or =OpenAPI= (Swagger)
*** Service Discovery
    - =UDDI=
    - Eureka (Spring Cloud Netflix)
    - Consul (HashiCorp)
    - Zookeeper (Apache)
    - Kubernetes Service Discovery
    - API Gateway
      - AWS
      - Kong
      - Apigee (Google Cloud)
      - Azure API Management

